{"version":3,"sources":["transReducer.js","transContext.js","child.js","App.js","serviceWorker.js","index.js"],"names":["TransactionReducer","state","action","type","payload","initialTransactions","amount","desc","TransactionContext","createContext","TransactionProvider","children","useReducer","dispatch","Provider","value","transactions","addTransaction","transObj","Child","useContext","useState","newDesc","setDesc","newAmount","setAmount","getIncome","income","i","length","getExpense","expense","className","map","ind","key","onSubmit","event","preventDefault","Number","alert","placeholder","onChange","ev","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAUeA,EAVc,SAACC,EAAOC,GACjC,OAAOA,EAAOC,MACV,IAAK,kBACD,MAAM,CAAED,EAAOE,SAAf,mBAA4BH,IAEhC,QACI,OAAOA,ICHbI,EAAsB,CACxB,CAAEC,OAAQ,IAAKC,KAAM,QACrB,CAAED,QAAS,GAAIC,KAAM,cACrB,CAAED,OAAQ,IAAKC,KAAM,WACrB,CAAED,QAAS,IAAKC,KAAM,iBAIbC,EAAqBC,wBAAcJ,GAEnCK,EAAsB,SAAC,GAAe,IAAdC,EAAa,EAAbA,SAAa,EACtBC,qBAAWZ,EAAoBK,GADT,mBACzCJ,EADyC,KAClCY,EADkC,KAa9C,OACI,kBAACL,EAAmBM,SAApB,CAA6BC,MAAO,CAChCC,aAAcf,EACdgB,eAbR,SAAwBC,GACpBL,EAAS,CACLV,KAAM,kBACNC,QAAS,CACLE,OAAQY,EAASZ,OACjBC,KAAMW,EAASX,WAUlBI,ICkEEQ,MA7Ff,WAAkB,IAAD,EAC0BC,qBAAWZ,GAA5CQ,EADO,EACPA,aAAcC,EADP,EACOA,eADP,EAEYI,mBAAS,IAFrB,mBAERC,EAFQ,KAECC,EAFD,OAGgBF,mBAAS,GAHzB,mBAGRG,EAHQ,KAGGC,EAHH,KAqBPC,EAAY,WAEd,IADA,IAAIC,EAAS,EACJC,EAAI,EAAGA,EAAIZ,EAAaa,OAAQD,IACjCZ,EAAaY,GAAGtB,OAAS,IACzBqB,GAAkBX,EAAaY,GAAGtB,QAE1C,OAAOqB,GAGLG,EAAa,WAEf,IADA,IAAIC,EAAU,EACLH,EAAI,EAAGA,EAAIZ,EAAaa,OAAQD,IACjCZ,EAAaY,GAAGtB,OAAS,IACzByB,GAAWf,EAAaY,GAAGtB,QAEnC,OAAOyB,GAGX,OACI,yBAAKC,UAAU,aACX,wBAAIA,UAAU,eAAd,mBAEA,4CAAiB,6BAAjB,KAA0BN,IAAcI,KAExC,yBAAKE,UAAU,qBACX,sCAAW,6BAAX,KAAoBN,KACpB,uCAAY,6BAAZ,KAAqBI,MAGzB,uCACA,6BAEA,wBAAIE,UAAU,mBACThB,EAAaiB,KAAI,SAACf,EAAUgB,GACzB,OAAQ,wBAAIC,IAAKD,GACb,8BAAOhB,EAASX,MAChB,kCAAQW,EAASZ,aAO7B,mDACA,6BAEA,0BAAM0B,UAAU,mBAAmBI,SA7DpB,SAACC,GAEpB,GADAA,EAAMC,iBACoB,IAAtBC,OAAOf,GAEP,OADAgB,MAAM,+BACC,EAEXvB,EAAe,CACXX,OAAQiC,OAAOf,GACfjB,KAAMe,IAGVC,EAAQ,IACRE,EAAU,KAkDF,oDACsB,6BAClB,2BAAOtB,KAAK,OACRY,MAAOO,EACPmB,YAAY,cACZC,SAAU,SAACC,GAAD,OAAQpB,EAAQoB,EAAGC,OAAO7B,QACpC8B,UAAQ,KAGhB,6BACA,+CACiB,6BACb,2BAAO1C,KAAK,SACRY,MAAOS,EACPiB,YAAY,SACZC,SAAU,SAACC,GAAD,OAAQlB,EAAUkB,EAAGC,OAAO7B,QACtC8B,UAAQ,KAEhB,6BACA,2BAAO1C,KAAK,SAASY,MAAM,uBC9E5B+B,MARf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a68b1ed5.chunk.js","sourcesContent":["const TransactionReducer =  ((state, action)=>{\n    switch(action.type){\n        case \"ADD_TRANSACTION\": {\n            return [action.payload , ...state]\n        }\n        default:\n            return state;\n    }\n})\n\nexport default TransactionReducer;","import React, { createContext, useReducer } from \"react\";\nimport TransactionReducer from './transReducer';\n\nconst initialTransactions = [\n    { amount: 500, desc: \"Cash\" },\n    { amount: -50, desc: \"Cold Drink\" },\n    { amount: 100, desc: \"Deposit\" },\n    { amount: -200, desc: \"Utility Bill\" },\n\n]\n\nexport const TransactionContext = createContext(initialTransactions);\n\nexport const TransactionProvider = ({children})=> {\n    let [state, dispatch] = useReducer(TransactionReducer, initialTransactions);\n\n    function addTransaction(transObj){\n        dispatch({\n            type: \"ADD_TRANSACTION\",\n            payload: { \n                amount: transObj.amount, \n                desc: transObj.desc \n            },\n        })\n    }\n\n    return(\n        <TransactionContext.Provider value={{\n            transactions: state,\n            addTransaction\n        }}>\n            {children}\n        </TransactionContext.Provider>\n    )\n}","import React, { useContext, useState } from 'react';\nimport { TransactionContext } from './transContext';\n\n\nfunction Child() {\n    let { transactions, addTransaction } = useContext(TransactionContext);\n    let [newDesc, setDesc] = useState(\"\");\n    let [newAmount, setAmount] = useState(0);\n\n\n    const handleAddition = (event) => {\n        event.preventDefault();\n        if (Number(newAmount) === 0) {\n            alert(\"Please enter correct value\");\n            return false;\n        }\n        addTransaction({\n            amount: Number(newAmount),\n            desc: newDesc\n        });\n\n        setDesc('');\n        setAmount(0)\n    }\n\n    const getIncome = () => {\n        let income = 0;\n        for (var i = 0; i < transactions.length; i++) {\n            if (transactions[i].amount > 0)\n                income = income + transactions[i].amount\n        }\n        return income;\n    }\n\n    const getExpense = () => {\n        let expense = 0;\n        for (var i = 0; i < transactions.length; i++) {\n            if (transactions[i].amount < 0)\n                expense += transactions[i].amount\n        }\n        return expense;\n    }\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"text-center\">Expense Tracker</h1>\n\n            <h3>Your Balance <br /> ${getIncome() + getExpense()}</h3>\n\n            <div className=\"expense-container\">\n                <h3>INCOME <br /> ${getIncome()}</h3>\n                <h3>EXPENSE <br /> ${getExpense()}</h3>\n            </div>\n\n            <h3>History</h3>\n            <hr />\n\n            <ul className=\"trnsaction-list\">\n                {transactions.map((transObj, ind) => {\n                    return (<li key={ind}>\n                        <span>{transObj.desc}</span>\n                        <span>${transObj.amount}</span>\n                    </li>\n                    )\n                })}\n\n            </ul>\n\n            <h3>Add new transaction</h3>\n            <hr />\n\n            <form className=\"transaction-form\" onSubmit={handleAddition}>\n                <label>\n                    Enter Description <br />\n                    <input type=\"text\"\n                        value={newDesc}\n                        placeholder=\"Description\"\n                        onChange={(ev) => setDesc(ev.target.value)}\n                        required />\n                </label>\n\n                <br />\n                <label>\n                    Enter Amount <br />\n                    <input type=\"number\"\n                        value={newAmount}\n                        placeholder=\"Amount\"\n                        onChange={(ev) => setAmount(ev.target.value)}\n                        required />\n                </label>\n                <br />\n                <input type=\"submit\" value=\"Add Transaction\" />\n            </form>\n        </div>\n    );\n}\n\nexport default Child;\n","import React from 'react';\nimport './App.css';\nimport Child from './child';\nimport {TransactionProvider} from './transContext';\n\nfunction App() {\n  return (\n    <TransactionProvider>\n      <Child />\n    </TransactionProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}